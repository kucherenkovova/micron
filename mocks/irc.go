// Code generated by MockGen. DO NOT EDIT.
// Source: app_test.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockirc is a mock of irc interface.
type Mockirc struct {
	ctrl     *gomock.Controller
	recorder *MockircMockRecorder
}

// MockircMockRecorder is the mock recorder for Mockirc.
type MockircMockRecorder struct {
	mock *Mockirc
}

// NewMockirc creates a new mock instance.
func NewMockirc(ctrl *gomock.Controller) *Mockirc {
	mock := &Mockirc{ctrl: ctrl}
	mock.recorder = &MockircMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockirc) EXPECT() *MockircMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Mockirc) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockircMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockirc)(nil).Close), ctx)
}

// Init mocks base method.
func (m *Mockirc) Init(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockircMockRecorder) Init(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*Mockirc)(nil).Init), ctx)
}

// Run mocks base method.
func (m *Mockirc) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockircMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*Mockirc)(nil).Run), ctx)
}
